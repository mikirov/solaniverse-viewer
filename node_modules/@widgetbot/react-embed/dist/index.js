"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const embed_api_1 = require("@widgetbot/embed-api");
const React = require("react");
const elements_1 = require("./elements");
const util_1 = require("./util");
class WidgetBot extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            url: null,
            id: util_1.generateUUID()
        };
        this.api = new embed_api_1.Client({
            id: this.state.id,
            iframe: null
        });
    }
    static getDerivedStateFromProps(props, state) {
        let shard = props.shard;
        if (!shard.startsWith('http'))
            shard = `https://${shard}`;
        if (shard.endsWith('/'))
            shard = shard.substring(0, shard.length - 1);
        let params = Object.assign(Object.assign({}, props.options), { api: state.id });
        if (props.username)
            params.username = props.username;
        const url = `${shard}/channels/${props.server}${props.channel ? `/${props.channel}` : ''}/${util_1.searchParams(params)}`;
        return { url };
    }
    componentDidMount() {
        const { onAPI } = this.props;
        if (onAPI)
            onAPI(this.api);
    }
    render() {
        const { defer, className, style, height, width, focusable } = this.props;
        return (React.createElement("div", { className: className, style: Object.assign(Object.assign({}, elements_1.Root({ width, height })), style) },
            React.createElement("iframe", { src: defer ? '' : this.state.url, ref: ref => (this.api.iframe = ref), style: elements_1.Embed, tabIndex: focusable ? null : -1, title: "Discord chat embed" })));
    }
}
exports.default = WidgetBot;
WidgetBot.defaultProps = {
    server: '299881420891881473',
    shard: 'https://e.widgetbot.io',
    options: {},
    defer: false,
    focusable: true
};
//# sourceMappingURL=index.js.map