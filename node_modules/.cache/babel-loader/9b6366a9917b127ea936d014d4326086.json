{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\n\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\n\nvar dispatchReactUnityEvent = function (eventName) {\n  var parameters = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    parameters[_i - 1] = arguments[_i];\n  } // This made should be made available to the global scope. When invoked, it\n  // will dispatch the given event to all event systems.\n\n\n  for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n    var eventSystem = eventSystems_1[_a];\n\n    if (eventSystem !== undefined) {\n      eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters));\n    }\n  }\n};\n/**\n * An event system.\n */\n\n\nvar EventSystem =\n/** @class */\nfunction () {\n  function EventSystem() {\n    /**\n     * The event map contains all the events that have been registered to the\n     * event system as a key-value pair of event name and event listener.\n     * @private\n     * @readonly\n     */\n    this.eventMap = new Map(); // The event system will be pushed to the global list of event system\n    // instances.\n\n    eventSystems.push(this); // If we're running inside of a browser environment, some global properties\n    // will be made available on the window allowing for Unity to communicate.\n\n    if (window !== undefined) {\n      // Register the global dispatch method.\n      if (window.dispatchReactUnityEvent === undefined) {\n        window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n      } // Create object for legacy bindings on the window.\n\n\n      if (window.ReactUnityWebGL === undefined) {\n        window.ReactUnityWebGL = {};\n      }\n    }\n  }\n  /**\n   * Registers an event to the system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {Function} eventListener the event's function\n   */\n\n\n  EventSystem.prototype.on = function (eventName, eventListener) {\n    // Adds the event to the event map.\n    this.eventMap.set(eventName, eventListener); // Add legacy binding to the window.\n\n    if (window !== undefined) {\n      window.ReactUnityWebGL[eventName] = function () {\n        var parameters = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          parameters[_i] = arguments[_i];\n        }\n\n        return eventListener.apply(void 0, parameters);\n      };\n    }\n  };\n  /**\n   * Removes all the Event Listeners with a specific Event Name.\n   * @public\n   * @param {string} eventName the event's name\n   * @example unityContext.removeEventListener(\"progress\");\n   */\n\n\n  EventSystem.prototype.removeEventListener = function (eventName) {\n    // Remove the event from the event map.\n    this.eventMap.delete(eventName); // Remove legacy binding from the window.\n\n    if (window !== undefined) {\n      delete window.ReactUnityWebGL[eventName];\n    }\n  };\n  /**\n   * Removes all the Event Listeners.\n   * @public\n   * @example unityContext.removeAllEventListeners();\n   */\n\n\n  EventSystem.prototype.removeAllEventListeners = function () {\n    // Remove legacy bindings from the window.\n    if (window !== undefined) {\n      this.eventMap.forEach(function (_value, key) {\n        delete window.ReactUnityWebGL[key];\n      });\n    } // Clear the event map.\n\n\n    this.eventMap.clear();\n  };\n  /**\n   * Dispatches an event that has been registered to the event system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {any} parameters the event's parameters\n   * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n   */\n\n\n  EventSystem.prototype.dispatchEvent = function (eventName) {\n    var parameters = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parameters[_i - 1] = arguments[_i];\n    }\n\n    var event = this.eventMap.get(eventName);\n\n    if (event !== undefined) {\n      event.apply(void 0, parameters);\n    }\n  };\n\n  return EventSystem;\n}();\n\nexports.EventSystem = EventSystem;","map":{"version":3,"sources":["../../source/library/event-system.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\nvar dispatchReactUnityEvent = function (eventName) {\n    var parameters = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        parameters[_i - 1] = arguments[_i];\n    }\n    // This made should be made available to the global scope. When invoked, it\n    // will dispatch the given event to all event systems.\n    for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n        var eventSystem = eventSystems_1[_a];\n        if (eventSystem !== undefined) {\n            eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters));\n        }\n    }\n};\n/**\n * An event system.\n */\nvar EventSystem = /** @class */ (function () {\n    function EventSystem() {\n        /**\n         * The event map contains all the events that have been registered to the\n         * event system as a key-value pair of event name and event listener.\n         * @private\n         * @readonly\n         */\n        this.eventMap = new Map();\n        // The event system will be pushed to the global list of event system\n        // instances.\n        eventSystems.push(this);\n        // If we're running inside of a browser environment, some global properties\n        // will be made available on the window allowing for Unity to communicate.\n        if (window !== undefined) {\n            // Register the global dispatch method.\n            if (window.dispatchReactUnityEvent === undefined) {\n                window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n            }\n            // Create object for legacy bindings on the window.\n            if (window.ReactUnityWebGL === undefined) {\n                window.ReactUnityWebGL = {};\n            }\n        }\n    }\n    /**\n     * Registers an event to the system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {Function} eventListener the event's function\n     */\n    EventSystem.prototype.on = function (eventName, eventListener) {\n        // Adds the event to the event map.\n        this.eventMap.set(eventName, eventListener);\n        // Add legacy binding to the window.\n        if (window !== undefined) {\n            window.ReactUnityWebGL[eventName] = function () {\n                var parameters = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    parameters[_i] = arguments[_i];\n                }\n                return eventListener.apply(void 0, parameters);\n            };\n        }\n    };\n    /**\n     * Removes all the Event Listeners with a specific Event Name.\n     * @public\n     * @param {string} eventName the event's name\n     * @example unityContext.removeEventListener(\"progress\");\n     */\n    EventSystem.prototype.removeEventListener = function (eventName) {\n        // Remove the event from the event map.\n        this.eventMap.delete(eventName);\n        // Remove legacy binding from the window.\n        if (window !== undefined) {\n            delete window.ReactUnityWebGL[eventName];\n        }\n    };\n    /**\n     * Removes all the Event Listeners.\n     * @public\n     * @example unityContext.removeAllEventListeners();\n     */\n    EventSystem.prototype.removeAllEventListeners = function () {\n        // Remove legacy bindings from the window.\n        if (window !== undefined) {\n            this.eventMap.forEach(function (_value, key) {\n                delete window.ReactUnityWebGL[key];\n            });\n        }\n        // Clear the event map.\n        this.eventMap.clear();\n    };\n    /**\n     * Dispatches an event that has been registered to the event system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {any} parameters the event's parameters\n     * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n     */\n    EventSystem.prototype.dispatchEvent = function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n        var event = this.eventMap.get(eventName);\n        if (event !== undefined) {\n            event.apply(void 0, parameters);\n        }\n    };\n    return EventSystem;\n}());\nexports.EventSystem = EventSystem;\n//# sourceMappingURL=event-system.js.map"]},"metadata":{},"sourceType":"script"}