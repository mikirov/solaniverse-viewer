{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUnityLoader = exports.Status = void 0;\n\nvar react_1 = require(\"react\");\n\nvar Status;\n\n(function (Status) {\n  Status[\"Idle\"] = \"Idle\";\n  Status[\"Loading\"] = \"Loading\";\n  Status[\"Loaded\"] = \"Loaded\";\n  Status[\"Error\"] = \"Error\";\n})(Status = exports.Status || (exports.Status = {}));\n/**\n * Hook to embed a Unity Loader script.\n * @param src The source of the unity loader\n * @returns a hook that returns the status of the loader\n */\n\n\nfunction useUnityLoader(src) {\n  var _a = react_1.useState(src ? Status.Loading : Status.Idle),\n      status = _a[0],\n      setStatus = _a[1]; // Effect hook will be invoked when the src changes.\n\n\n  react_1.useEffect(function () {\n    if (src === null) {\n      setStatus(Status.Idle);\n      return;\n    } // Fetch existing script element by src\n    // It may have been added by another instance of this hook\n\n\n    var script = document.querySelector(\"script[src=\\\"\" + src + \"\\\"]\");\n\n    if (script === null) {\n      // Create script\n      script = document.createElement(\"script\");\n      script.src = src;\n      script.async = true;\n      script.setAttribute(\"data-status\", \"loading\"); // Add script to document body\n\n      document.body.appendChild(script); // Store status in attribute on script\n      // This can be read by other instances of this hook\n\n      var setAttributeFromEvent = function (event) {\n        script === null || script === void 0 ? void 0 : script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n      };\n\n      script.addEventListener(\"load\", setAttributeFromEvent);\n      script.addEventListener(\"error\", setAttributeFromEvent);\n    } else {\n      // Grab existing script status from attribute and set to state.\n      setStatus(script.getAttribute(\"data-status\") === \"ready\" ? Status.Loaded : Status.Error);\n    } // Script event handler to update status in state\n    // Note: Even if the script already exists we still need to add\n    // event handlers to update the state for *this* hook instance.\n\n\n    var setStateFromEvent = function (event) {\n      setStatus(event.type === \"load\" ? Status.Loaded : Status.Error);\n    }; // Add event listeners\n\n\n    script.addEventListener(\"load\", setStateFromEvent);\n    script.addEventListener(\"error\", setStateFromEvent); // Remove event listeners on cleanup\n\n    return function () {\n      if (script) {\n        script.removeEventListener(\"load\", setStateFromEvent);\n        script.removeEventListener(\"error\", setStateFromEvent);\n        document.body.removeChild(script);\n      }\n    };\n  }, [src] // Only re-run effect if script src changes\n  );\n  return status;\n}\n\nexports.useUnityLoader = useUnityLoader;","map":{"version":3,"sources":["../../source/hooks/use-unity-loader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useUnityLoader = exports.Status = void 0;\nvar react_1 = require(\"react\");\nvar Status;\n(function (Status) {\n    Status[\"Idle\"] = \"Idle\";\n    Status[\"Loading\"] = \"Loading\";\n    Status[\"Loaded\"] = \"Loaded\";\n    Status[\"Error\"] = \"Error\";\n})(Status = exports.Status || (exports.Status = {}));\n/**\n * Hook to embed a Unity Loader script.\n * @param src The source of the unity loader\n * @returns a hook that returns the status of the loader\n */\nfunction useUnityLoader(src) {\n    var _a = react_1.useState(src ? Status.Loading : Status.Idle), status = _a[0], setStatus = _a[1];\n    // Effect hook will be invoked when the src changes.\n    react_1.useEffect(function () {\n        if (src === null) {\n            setStatus(Status.Idle);\n            return;\n        }\n        // Fetch existing script element by src\n        // It may have been added by another instance of this hook\n        var script = document.querySelector(\"script[src=\\\"\" + src + \"\\\"]\");\n        if (script === null) {\n            // Create script\n            script = document.createElement(\"script\");\n            script.src = src;\n            script.async = true;\n            script.setAttribute(\"data-status\", \"loading\");\n            // Add script to document body\n            document.body.appendChild(script);\n            // Store status in attribute on script\n            // This can be read by other instances of this hook\n            var setAttributeFromEvent = function (event) {\n                script === null || script === void 0 ? void 0 : script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n            };\n            script.addEventListener(\"load\", setAttributeFromEvent);\n            script.addEventListener(\"error\", setAttributeFromEvent);\n        }\n        else {\n            // Grab existing script status from attribute and set to state.\n            setStatus(script.getAttribute(\"data-status\") === \"ready\"\n                ? Status.Loaded\n                : Status.Error);\n        }\n        // Script event handler to update status in state\n        // Note: Even if the script already exists we still need to add\n        // event handlers to update the state for *this* hook instance.\n        var setStateFromEvent = function (event) {\n            setStatus(event.type === \"load\" ? Status.Loaded : Status.Error);\n        };\n        // Add event listeners\n        script.addEventListener(\"load\", setStateFromEvent);\n        script.addEventListener(\"error\", setStateFromEvent);\n        // Remove event listeners on cleanup\n        return function () {\n            if (script) {\n                script.removeEventListener(\"load\", setStateFromEvent);\n                script.removeEventListener(\"error\", setStateFromEvent);\n                document.body.removeChild(script);\n            }\n        };\n    }, [src] // Only re-run effect if script src changes\n    );\n    return status;\n}\nexports.useUnityLoader = useUnityLoader;\n//# sourceMappingURL=use-unity-loader.js.map"]},"metadata":{},"sourceType":"script"}