{"ast":null,"code":"var _jsxFileName = \"/Users/misho/Repos/solaniverse-viewer/src/components/Wallet/Wallet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { getLedgerWallet, getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletExtensionWallet, getSolletWallet, getTorusWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js'; // Default styles that can be overridden by your app\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst Wallet = () => {\n  _s();\n\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet; // You can also provide a custom RPC endpoint\n\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]); // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getTorusWallet({\n    options: {\n      clientId: 'Get a client ID @ https://developer.tor.us'\n    }\n  }), getLedgerWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], [network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    tabIndex: 2,\n    style: {\n      position: \"absolute\",\n      zIndex: 2,\n      top: \"20px\",\n      left: \"70px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n          children: /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Wallet, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/misho/Repos/solaniverse-viewer/src/components/Wallet/Wallet.tsx"],"names":["React","useMemo","ConnectionProvider","WalletProvider","WalletAdapterNetwork","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletExtensionWallet","getSolletWallet","getTorusWallet","WalletModalProvider","WalletMultiButton","clusterApiUrl","require","Wallet","network","Devnet","endpoint","wallets","options","clientId","position","zIndex","top","left"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,8BAAnD;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SACIC,eADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,iBAJJ,EAKIC,wBALJ,EAMIC,eANJ,EAOIC,cAPJ,QAQO,gCARP;AASA,SACIC,mBADJ,EAGIC,iBAHJ,QAIO,iCAJP;AAKA,SAASC,aAAT,QAA8B,iBAA9B,C,CAEA;;;;AACAC,OAAO,CAAC,4CAAD,CAAP;;AAEA,MAAMC,MAAU,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,OAAO,GAAGb,oBAAoB,CAACc,MAArC,CAFqB,CAIrB;;AACA,QAAMC,QAAQ,GAAGlB,OAAO,CAAC,MAAMa,aAAa,CAACG,OAAD,CAApB,EAA+B,CAACA,OAAD,CAA/B,CAAxB,CALqB,CAOrB;AACA;;AACA,QAAMG,OAAO,GAAGnB,OAAO,CAAC,MAAM,CAC1BK,gBAAgB,EADU,EAE1BC,cAAc,EAFY,EAG1BC,iBAAiB,EAHS,EAI1BG,cAAc,CAAC;AACXU,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AADE,GAAD,CAJY,EAO1BjB,eAAe,EAPW,EAQ1BK,eAAe,CAAC;AAAEO,IAAAA;AAAF,GAAD,CARW,EAS1BR,wBAAwB,CAAC;AAAEQ,IAAAA;AAAF,GAAD,CATE,CAAP,EAUpB,CAACA,OAAD,CAVoB,CAAvB;AAYA,sBACI;AAAK,IAAA,QAAQ,EAAE,CAAf;AAAmB,IAAA,KAAK,EAAE;AAACM,MAAAA,QAAQ,EAAE,UAAX;AAAuBC,MAAAA,MAAM,EAAE,CAA/B;AAAkCC,MAAAA,GAAG,EAAE,MAAvC;AAA+CC,MAAAA,IAAI,EAAE;AAArD,KAA1B;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,QAAQ,EAAEP,QAA9B;AAAA,6BACI,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAEC,OAAzB;AAAkC,QAAA,WAAW,MAA7C;AAAA,+BACI,QAAC,mBAAD;AAAA,iCACI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAjCD;;GAAMJ,M;;KAAAA,M;AAmCN,eAAeA,MAAf","sourcesContent":["import React, { FC, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Default styles that can be overridden by your app\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst Wallet: FC = () => {\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n    const network = WalletAdapterNetwork.Devnet;\n\n    // You can also provide a custom RPC endpoint\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n    // Only the wallets you configure here will be compiled into your application\n    const wallets = useMemo(() => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getTorusWallet({\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\n        }),\n        getLedgerWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network }),\n    ], [network]);\n\n    return (\n        <div tabIndex={2}  style={{position: \"absolute\", zIndex: 2, top: \"20px\", left: \"70px\"}}>\n            <ConnectionProvider endpoint={endpoint}>\n                <WalletProvider wallets={wallets} autoConnect>\n                    <WalletModalProvider>\n                        <WalletMultiButton />\n                        {/*<WalletDisconnectButton />*/}\n                    </WalletModalProvider>\n                </WalletProvider>\n            </ConnectionProvider>\n        </div>\n    );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}